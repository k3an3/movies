from functools import wraps

from flask import Flask, request, abort
from peewee import fn

from models import db_init, Movie, db
from utils import help_text, add_movie

app = Flask(__name__)

SLACK_TOKEN = 'peCu2HW2WdquZNZfqQk6YUcg'
SUPPORTED_COMMANDS = ['watched', 'choose', 'add']


def auth_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = request.form.get('token')
        if not token == SLACK_TOKEN:
            abort(401)
            return f(*args, **kwargs)

    return decorated_function


@app.route("/command")
@auth_required
def index():
    args = request.form.get('text').split()
    # Check if we know about this command
    if args[0] not in SUPPORTED_COMMANDS:
        return help_text()
    if args[0] == 'add':
        return "Added:" + add_movie(' '.join(args[1:])).get_details()
    elif args[0] == 'choose':
        if len(args) == 1:
            random = Movie.select().order_by(fn.Random())
        else:
            random = Movie.filter(Movie.genre == ' '.join(args[1:]))
        return random.get().get_details()


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


if __name__ == "__main__":
    app.debug = True
    db_init()
    app.run()
